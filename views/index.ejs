<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Demo: Build a store locator using Mapbox GL JS</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <script src="https://api.tiles.mapbox.com/mapbox-gl-js/v2.2.0/mapbox-gl.js"></script>
    <link
      href="https://api.tiles.mapbox.com/mapbox-gl-js/v2.2.0/mapbox-gl.css"
      rel="stylesheet"
    />
    <style>
      body {
        color: #404040;
        font: 400 15px/22px 'Source Sans Pro', 'Helvetica Neue', Sans-serif;
        margin: 0;
        padding: 0;
        -webkit-font-smoothing: antialiased;
      }

      * {
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
      }

      .sidebar {
        position: absolute;
        width: 33.3333%;
        height: 100%;
        top: 0;
        left: 0;
        overflow: hidden;
        border-right: 1px solid rgba(0, 0, 0, 0.25);
      }

      .map {
        position: absolute;
        left: 33.3333%;
        width: 66.6666%;
        top: 0;
        bottom: 0;
      }

      h1 {
        font-size: 22px;
        margin: 0;
        font-weight: 400;
        line-height: 20px;
        padding: 20px 2px;
      }

      a {
        color: #404040;
        text-decoration: none;
      }

      a:hover {
        color: #101010;
      }

      .heading {
        background: #fff;
        border-bottom: 1px solid #eee;
        min-height: 60px;
        line-height: 60px;
        padding: 0 10px;
        background-color: #00853e;
        color: #fff;
      }

      .listings {
        height: 100%;
        overflow: auto;
        padding-bottom: 60px;
      }

      .listings .item {
        display: block;
        border-bottom: 1px solid #eee;
        padding: 10px;
        text-decoration: none;
      }

      .listings .item:last-child {
        border-bottom: none;
      }
      .listings .item .title {
        display: block;
        color: #00853e;
        font-weight: 700;
      }

      .listings .item .title small {
        font-weight: 400;
      }
      .listings .item.active .title,
      .listings .item .title:hover {
        color: #8cc63f;
      }
      .listings .item.active {
        background-color: #f8f8f8;
      }
      ::-webkit-scrollbar {
        width: 3px;
        height: 3px;
        border-left: 0;
        background: rgba(0, 0, 0, 0.1);
      }
      ::-webkit-scrollbar-track {
        background: none;
      }
      ::-webkit-scrollbar-thumb {
        background: #00853e;
        border-radius: 0;
      }

      .marker {
        border: none;
        cursor: pointer;
        height: 56px;
        width: 43px;
        background-image: url(marker.png);
        background-color: rgba(0, 0, 0, 0);
      }

      .clearfix {
        display: block;
      }
      .clearfix:after {
        content: '.';
        display: block;
        height: 0;
        clear: both;
        visibility: hidden;
      }

      /* Marker tweaks */
      .mapboxgl-popup {
        padding-bottom: 50px;
      }

      .mapboxgl-popup-close-button {
        display: none;
      }
      .mapboxgl-popup-content {
        font: 400 15px/22px 'Source Sans Pro', 'Helvetica Neue', Sans-serif;
        padding: 0;
        width: 180px;
      }
      .mapboxgl-popup-content-wrapper {
        padding: 1%;
      }
      .mapboxgl-popup-content h3 {
        background: #91c949;
        color: #fff;
        margin: 0;
        display: block;
        padding: 10px;
        border-radius: 3px 3px 0 0;
        font-weight: 700;
        margin-top: -15px;
      }

      .mapboxgl-popup-content h4 {
        margin: 0;
        display: block;
        padding: 10px 10px 10px 10px;
        font-weight: 400;
      }

      .mapboxgl-popup-content div {
        padding: 10px;
      }

      .mapboxgl-container .leaflet-marker-icon {
        cursor: pointer;
      }

      .mapboxgl-popup-anchor-top > .mapboxgl-popup-content {
        margin-top: 15px;
      }

      .mapboxgl-popup-anchor-top > .mapboxgl-popup-tip {
        border-bottom-color: #91c949;
      }
    </style>
  </head>
  <body>
    <div class="sidebar">
      <div class="heading">
        <h1>Lokasi</h1>
      </div>
      <div id="listings" class="listings"></div>
    </div>
    <div id="map" class="map"></div>
    <script>
      /* This will let you use the .remove() function later on */
      if (!('remove' in Element.prototype)) {
        Element.prototype.remove = function () {
          if (this.parentNode) {
            this.parentNode.removeChild(this);
          }
        };
      }

      mapboxgl.accessToken = 'pk.eyJ1IjoiYW5kcmVzamVycmllbHMiLCJhIjoiY2tuMWV6NGE5MHgycTJ2bG4wMmoxcmpreCJ9.wgJ5c_ImuNBnbbyLlmPe5g';

      /**
       * Add the map to the page
       */
      var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        center: [107.61075968273924, -6.89121486912441], //-6.89121486912441, 
        zoom: 15,
      });

      var stores = {
        'type': 'FeatureCollection',
        'features': [
          {
            'type': 'Feature',
            'geometry': {
              'type': 'Point',
              'coordinates': [107.61043792489653, -6.893194719054599]
            },
            'properties': {
              'phoneFormatted': '(202) 234-7336',
              'phone': '2022347336',
              'address': 'Pintu Masuk ITB',
              'city': 'Washington DC',
              'country': 'United States',
              'crossStreet': 'at 15th St NW',
              'postalCode': '20005',
              'state': 'D.C.'
            }
          },
          {
            'type': 'Feature',
            'geometry': {
              'type': 'Point',
              'coordinates': [107.60845619489565, -6.8938593825294925]
            },
            'properties': {
              'phoneFormatted': '(202) 507-8357',
              'phone': '2025078357',
              'address': 'Pertigaan Tamansari',
              'city': 'Washington DC',
              'country': 'United States',
              'crossStreet': 'at 22nd St NW',
              'postalCode': '20037',
              'state': 'D.C.'
            }
          },
          {
            'type': 'Feature',
            'geometry': {
              'type': 'Point',
              'coordinates': [107.61293517249902, -6.893753036436151]
            },
            'properties': {
              'phoneFormatted': '(202) 387-9338',
              'phone': '2023879338',
              'address': 'Pertigaan Borromeus',
              'city': 'Washington DC',
              'country': 'United States',
              'crossStreet': 'at Dupont Circle',
              'postalCode': '20036',
              'state': 'D.C.'
            }
          },
          {
            'type': 'Feature',
            'geometry': {
              'type': 'Point',
              'coordinates': [107.60828212400365, -6.887870730916851]
            },
            'properties': {
              'phoneFormatted': '(202) 337-9338',
              'phone': '2023379338',
              'address': 'Ujung Tamansari Food Fest',
              'city': 'Washington DC',
              'country': 'United States',
              'crossStreet': 'at 34th St NW',
              'postalCode': '20007',
              'state': 'D.C.'
            }
          },
          {
            'type': 'Feature',
            'geometry': {
              'type': 'Point',
              'coordinates': [107.61147565512664, -6.887199412310427]
            },
            'properties': {
              'phoneFormatted': '(202) 547-9338',
              'phone': '2025479338',
              'address': 'Pertigaan Dayang Sumbi',
              'city': 'Washington DC',
              'country': 'United States',
              'crossStreet': 'btwn 2nd & 3rd Sts. SE',
              'postalCode': '20003',
              'state': 'D.C.'
            }
          },
          {
            'type': 'Feature',
            'geometry': {
              'type': 'Point',
              'coordinates': [107.61351094542155, -6.88739881395713]
            },
            'properties': {
              'address': 'Pertigaan Juanda',
              'city': 'College Park',
              'country': 'United States',
              'postalCode': '20740',
              'state': 'MD'
            }
          },
          {
            'type': 'Feature',
            'geometry': {
              'type': 'Point',
              'coordinates': [107.61362362899371, -6.885192622300306]
            },
            'properties': {
              'phoneFormatted': '(301) 654-7336',
              'phone': '3016547336',
              'address': 'Pertigaan McD Dago',
              'cc': 'US',
              'city': 'Bethesda',
              'country': 'United States',
              'postalCode': '20814',
              'state': 'MD'
            }
          },
          {
            'type': 'Feature',
            'geometry': {
              'type': 'Point',
              'coordinates': [107.61145627481227, -6.884902360324478]
            },
            'properties': {
              'phoneFormatted': '(571) 203-0082',
              'phone': '5712030082',
              'address': 'Pertigaan Siliwangi',
              'city': 'Reston',
              'country': 'United States',
              'crossStreet': 'btw Explorer & Library',
              'postalCode': '20190',
              'state': 'VA'
            }
          }
        ]
      };  

      class Element {
        constructor() {
            this.idx = 0;           // index node
            this.visited = [];      // node yang sudah dikunjungi
            this.weightVisited = 0; // bobot jarak yg sudah dilewati (sama seperti g(n))
            this.weight = 0;        // bobot node (sama seperti g(n) + h(n))
        }
      
        constructor(index, list, wV, w) {
            this.idx = index;
            this.visited = list;
            this.weightVisited = wV;
            this.weight = w;
        }
      
        setIdx(index) {
            this.idx = index;
        }
      
        getIdx() {
            return this.idx;
        }
      
        addNode(index) {
            this.visited.push(index);
        }
      
        gethasVisited() {
            return this.visited;
        }
      
        getWeightVisited() {
            return this.weightVisited;
        }
      
        getWeight() {
            return this.weight;
        }
      }
      class PriorityQueue {
      
          constructor() {
              this.list = [];         // isi queue
              this.hasVisited = [];   // isi node2 yang sudah dikunjungi (unik)
          }
        
          isEmpty() {
              return this.list.length === 0;
          }
        
          enqueue(element) {
              // Kosong
              if (isEmpty()) {
                  this.list.push(element);
              }
            
              // Element belum ada di hasVisited; element baru dikunjungi
              else if (this.hasVisited.findIndex(element.getIdx()) != -1){
                  let i = 0;
                  // Selama element baru blm dipush, masukin semua element lama dulu
                  while (i < this.list.length) {
                    if (this.list[i].getWeight > element.getWeight()) {
                      this.list.splice(i, 0, element);
                      break;
                    }
                    i++;
                  }

                  // Element baru paling besar; i mencapai max
                  if (i === this.list.length) {
                    this.list.push(element);
                  }
              }
            
              // Tambah hasVisited
              this.hasVisited.push(element.getIdx());
          }
        
          dequeue(element) {
              if (!isEmpty()) {
                  return this.list.shift(element);
              }
          }
        
          peek() {
              if (!isEmpty()) {
                  return this.list[0];
              }
          }
      }

      
      /**
       * Assign a unique id to each store. You'll use this `id`
       * later to associate each point on the map with a listing
       * in the sidebar.
       */
      stores.features.forEach(function (store, i) {
        store.properties.id = i;
      });

      /**
       * Wait until the map loads to make changes to the map.
       */
      map.on('load', function (e) {
        /**
         * This is where your '.addLayer()' used to be, instead
         * add only the source without styling a layer
         */
        map.addSource('places', {
          'type': 'geojson',
          'data': stores
        });

        /**
         * Add all the things to the page:
         * - The location listings on the side of the page
         * - The markers onto the map
         */
        buildLocationList(stores);
        addMarkers();

        // buat a star
        var long = [107.61043792489653, 107.60845619489565, 107.61293517249902, 107.60828212400365, 107.61147565512664, 107.61351094542155, 107.61362362899371, 107.61145627481227];
        var lat = [-6.893194719054599, -6.8938593825294925, -6.893753036436151, -6.887870730916851, -6.887199412310427, -6.88739881395713, -6.885192622300306, -6.884902360324478];
        var mat = [
            [0, 1, 1, 0, 0, 0, 0, 0],
            [1, 0, 0, 1, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 1, 0, 0],
            [0, 1, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 1, 0, 1, 1, 1],
            [0, 0, 1, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 1, 1, 0, 1],
            [0, 0, 0, 0, 1, 0, 1, 0]
          ];

        var e = aStar(1, 3, mat, long, lat);
        var coor = [];
        for (let index = 0; index < e.hasVisited.length; index++) {
          let a = long[e.hasVisited[index]];
          let b = lat[e.hasVisited[index]];
          let arr = [a,b];
          coor.push(arr);
        }
        var tes = [
          [107.61043792489653, -6.893194719054599],
          [107.60845619489565, -6.8938593825294925],
          [107.61293517249902, -6.893753036436151]
        ];
        

        // buat nambah garis
<<<<<<< HEAD
        map.addSource('route', {
          'type': 'geojson',
          'data': {
            'type': 'Feature',
            'properties': {},
            'geometry': {
                'type': 'LineString',
                'coordinates': [
                  [107.61043792489653, -6.893194719054599],
                  [107.60845619489565, -6.8938593825294925],
                  [107.61293517249902, -6.893753036436151]
                ]
=======
        addLine(0, 4);
        
      
        function addLine(idxsrc, idxdes) {
          var coor = [];
          stores.features.forEach(element => {
              coor.push(element.geometry.coordinates);
          });
          var mat = [
            [0, 1, 1, 0, 0, 0, 0, 0],
            [1, 0, 0, 1, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 1, 0, 0],
            [0, 1, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 1, 0, 1, 1, 1],
            [0, 0, 1, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 1, 1, 0, 1],
            [0, 0, 0, 0, 1, 0, 1, 0]
          ];
          
          var e = aStar(idxsrc, idxdes, mat, coor);
          var tes = [];
          e.visited.forEach(element => {
            tes.push(coor[element]);
          });
          
          map.addSource('route', {
            'type': 'geojson',
            'data': {
              'type': 'Feature',
              'properties': {},
              'geometry': {
                  'type': 'LineString',
                  'coordinates': tes
              }
>>>>>>> b6faada7ed9197d4c5335a2e775bb490f8a1282d
            }
          });

          map.addLayer({
            'id': 'route',
            'type': 'line',
            'source': 'route',
            'layout': {
              'line-join': 'round',
              'line-cap': 'round'
            },
            'paint': {
              'line-color': 'red',
              'line-width': 8
            }
          });
        }

        function haversineDistance(long1, lat1, long2, lat2) {
            // Diambil dari https://www.movable-type.co.uk/scripts/latlong.html
            const r = 6317 // radius bumi 6317 km
            const sigma1 = lat1 * Math.PI/180;
            const sigma2 = lat2 * Math.PI/180;
            const deltasigma = (lat2 - lat1) * Math.PI/180;
            const deltalambda = (long1 - long2) * Math.PI/180
        
            const a = Math.sin(deltasigma/2) * Math.sin(deltasigma/2) + Math.cos(sigma1) * Math.cos(sigma2) * Math.sin(deltalambda/2) * Math.sin(deltalambda/2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            return r * c;
        }


        // Algoritma A*

        // Inisialisasi elemen pertama dan queue
        function aStar(idxsrc, idxdes, matrix, coor) {
            // Kamus
            // idxsrc   : indeks start node
            // idxdes   : indeks destination node
            // matrix   : adjacency matrix
            // long     : list of longitudes
            // lat      : list of lattitudes
        
            var el = new Element(idxsrc, [], 0, 0);
            var queue = new PriorityQueue();
            queue.enqueue(el);
        
            // Pengulangan sampai top of queue adalah node tujuan atau queue kosong
            while (el.getIdx() != idxdes && !queue.isEmpty()) {
                el = queue.dequeue();
            
                // Mencari adjacency di matrix
                for (let kolom = 0; kolom < matrix[el.getIdx()].length; kolom++) {
                    if (matrix[el.getIdx()][kolom] == 1) {
                        let distanceElNextEl = haversineDistance(coor[el.getIdx()][0], coor[el.getIdx()][1], coor[kolom][0], coor[kolom][1]); // hitung jarak pindah elemen
                        let heuristicDistance = haversineDistance(coor[indexTujuan][0], coor[indexTujuan][1], coor[kolom][0], coor[kolom][1]); // hitung jarak heuristik nextEl ke tujuan
                        let newWeightVisited = el.getWeightVisited() + distanceElNextEl; // jarak baru (g(n))
                        let newWeight = newWeightVisited + heuristicDistance; // bobot baru (g(n) + h(n))
                        let nextEl = new Element(kolom, el.gethasVisited(), newWeightVisited, newWeight) // bikin next element
                        nextEl.addNode(el.getIdx()); // nambah node yg udah dikunjungi
                        queue.enqueue(nextEl); // enqueue
                    }
                }
              
                // Next element
                el = queue.peek();
            }
          
            // Isi el.visited dengan diri sendiri
            el.addNode(el.getIdx());
          
            // Kondisi ketemu
            if (el.getIdx() === idxdes) {
                return el;
            }
          
            // Kondisi gaketemu : dummy element dgn indeks -1
            else {
                return new Element(-1, [], 0, 0);
            }
        }
      

        /**
         * Add a marker to the map for every store listing.
         **/
        function addMarkers() {
          /* For each feature in the GeoJSON object above: */
          stores.features.forEach(function (marker) {
            /* Create a div element for the marker. */
            var el = document.createElement('div');
            /* Assign a unique `id` to the marker. */
            el.id = 'marker-' + marker.properties.id;
            /* Assign the `marker` class to each marker for styling. */
            el.className = 'marker';

            /**
             * Create a marker using the div element
             * defined above and add it to the map.
             **/
            new mapboxgl.Marker(el, { offset: [0, -23] })
              .setLngLat(marker.geometry.coordinates)
              .addTo(map);

            /**
             * Listen to the element and when it is clicked, do three things:
             * 1. Fly to the point
             * 2. Close all other popups and display popup for clicked store
             * 3. Highlight listing in sidebar (and remove highlight for all other listings)
             **/
            el.addEventListener('click', function (e) {
              /* Fly to the point */
              flyToStore(marker);
              /* Close all other popups and display popup for clicked store */
              createPopUp(marker);
              /* Highlight listing in sidebar */
              var activeItem = document.getElementsByClassName('active');
              e.stopPropagation();
              if (activeItem[0]) {
                activeItem[0].classList.remove('active');
              }
              var listing = document.getElementById(
                'listing-' + marker.properties.id
              );
              listing.classList.add('active');
            });
          });
        }

        /**
         * Add a listing for each store to the sidebar.
         **/
        function buildLocationList(data) {
          data.features.forEach(function (store, i) { 
            /**
             * Create a shortcut for `store.properties`,
             * which will be used several times below.
             **/
            var prop = store.properties;

            /* Add a new listing section to the sidebar. */
            var listings = document.getElementById('listings');
            var listing = listings.appendChild(document.createElement('div'));
            /* Assign a unique `id` to the listing. */
            listing.id = 'listing-' + prop.id;
            /* Assign the `item` class to each listing for styling. */
            listing.className = 'item';

            /* Add the link to the individual listing created above. */
            var link = listing.appendChild(document.createElement('a'));
            link.href = '#';
            link.className = 'title';
            link.id = 'link-' + prop.id;
            link.innerHTML = prop.address;

            /* Add details to the individual listing. */
            var details = listing.appendChild(document.createElement('div'));
            details.innerHTML = prop.city;
            if (prop.phone) {
              details.innerHTML += ' &middot; ' + prop.phoneFormatted;
            }

            /**
             * Listen to the element and when it is clicked, do four things:
             * 1. Update the `currentFeature` to the store associated with the clicked link
             * 2. Fly to the point
             * 3. Close all other popups and display popup for clicked store
             * 4. Highlight listing in sidebar (and remove highlight for all other listings)
             **/
            link.addEventListener('click', function (e) {
              for (var i = 0; i < data.features.length; i++) {
                if (this.id === 'link-' + data.features[i].properties.id) {
                  var clickedListing = data.features[i];
                  flyToStore(clickedListing);
                  createPopUp(clickedListing);
                }
              }
              var activeItem = document.getElementsByClassName('active');
              if (activeItem[0]) {
                activeItem[0].classList.remove('active');
              }
              this.parentNode.classList.add('active');
            });
          });
        }

        /**
         * Use Mapbox GL JS's `flyTo` to move the camera smoothly
         * a given center point.
         **/
        function flyToStore(currentFeature) {
          map.flyTo({
            center: currentFeature.geometry.coordinates,
            zoom: 18
          });
        }

        /**
         * Create a Mapbox GL JS `Popup`.
         **/
        function createPopUp(currentFeature) {
          var popUps = document.getElementsByClassName('mapboxgl-popup');
          if (popUps[0]) popUps[0].remove();
          var popup = new mapboxgl.Popup({ closeOnClick: false })
            .setLngLat(currentFeature.geometry.coordinates)
            .setHTML(
              '<h3>Sweetgreen</h3>' +
                '<h4>' +
                currentFeature.properties.address +
                '</h4>'
            )
            .addTo(map);
        }

         class Element {
           constructor() {
               this.idx = 0;           // index node
               this.visited = [];      // node yang sudah dikunjungi
               this.weightVisited = 0; // bobot jarak yg sudah dilewati (sama seperti g(n))
               this.weight = 0;        // bobot node (sama seperti g(n) + h(n))
           }
    
           constructor(index, list, wV, w) {
               this.idx = index;
               this.visited = list;
               this.weightVisited = wV;
               this.weight = w;
           }
    
           setIdx(index) {
               this.idx = index;
           }
    
           getIdx() {
               return this.idx;
           }
    
           addNode(index) {
               this.visited.push(index);
           }
    
           gethasVisited() {
               return this.visited;
           }
    
           getWeightVisited() {
               return this.weightVisited;
           }
    
           getWeight() {
               return this.weight;
           }
         }
         class PriorityQueue {
    
           constructor() {
               this.list = [];         // isi queue
               this.hasVisited = [];   // isi node2 yang sudah dikunjungi (unik)
           }
    
           isEmpty() {
               return this.list.length == 0;
           }
    
           enqueue(element) {
               // Kosong
               if (isEmpty()) {
                   this.list.push(element);
               }
        
               // Element belum ada di hasVisited; element baru dikunjungi
               else if (this.hasVisited.findIndex(element.getIdx()) != -1){
                   // Tampung ke array baru
                   let newList = [];
                   let isPushed = false;
                   let i = 0
                   // Selama element baru blm dipush, masukin semua element lama dulu
                   while (!isPushed) {
                       // Element lama bobotnya lebih ringan
                       if (this.list[i].getWeight() <= element.getWeight()) {
                           newList.push(this.list[i]);
                           i++;
                       }
                       // Element baru di akhir array
                       else {
                           isPushed = true;
                           newList.push(element);
                       }
                   }
                   // Push sisa array
                   while (i < this.list.length) {
                       newList.push(this.list[i]);
                   }
                   // Assign ke atribut
                   this.list = newList;
               }
        
               // Tambah hasVisited
               this.hasVisited.push(element.getIdx());
           }
    
           dequeue(element) {
               if (!isEmpty()) {
                   return this.list.shift(element)
               }
           }
    
           peek() {
               if (!isEmpty()) {
                   return this.list[0];
               }
           }
          }

         function haversineDistance(long1, lat1, long2, lat2) {
             // Diambil dari https://www.movable-type.co.uk/scripts/latlong.html
             const r = 6317 // radius bumi 6317 km
             const sigma1 = lat1 * Math.PI/180;
             const sigma2 = lat2 * Math.PI/180;
             const deltasigma = (lat2 - lat1) * Math.PI/180;
             const deltalambda = (long1 - long2) * Math.PI/180
    
             const a = Math.sin(deltasigma/2) * Math.sin(deltasigma/2) + Math.cos(sigma1) * Math.cos(sigma2) * Math.sin(deltalambda/2) * Math.sin(deltalambda/2);
             const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
             return r * c;
         }
  
  
         // Algoritma A*
  
         // Inisialisasi elemen pertama dan queue
         function aStar(idxsrc, idxdes, matrix, long, lat) {
             // Kamus
             // idxsrc   : indeks start node
             // idxdes   : indeks destination node
             // matrix   : adjacency matrix
             // long     : list of longitudes
             // lat      : list of lattitudes
    
             var el = new Element(idxsrc, [], 0, 0);
             var queue = new PriorityQueue();
             queue.enqueue(el);
    
             // Pengulangan sampai top of queue adalah node tujuan atau queue kosong
             while (el.getIdx() != idxdes && !queue.isEmpty()) {
                 el = queue.dequeue();
        
                 // Mencari adjacency di matrix
                 for (let kolom = 0; kolom < matrix[el.getIdx()].length; kolom++) {
                     if (matrix[el.getIdx()][kolom] == 1) {
                         let distanceElNextEl = haversineDistance(long[el.getIdx()], lat[el.getIdx()], long[kolom], lat[kolom]); // hitung jarak pindah elemen
                         let heuristicDistance = haversineDistance(long[indexTujuan], lat[indexTujuan], long[kolom], lat[kolom]); // hitung jarak heuristik nextEl ke tujuan
                         let newWeightVisited = el.getWeightVisited() + distanceElNextEl; // jarak baru (g(n))
                         let newWeight = newWeightVisited + heuristicDistance; // bobot baru (g(n) + h(n))
                         let nextEl = new Element(kolom, el.gethasVisited(), newWeightVisited, newWeight) // bikin next element
                         nextEl.addNode(el.getIdx()); // nambah node yg udah dikunjungi
                         queue.enqueue(nextEl); // enqueue
                     }
                 }
          
                 // Next element
                 el = queue.peek();
             }
      
             // Isi el.visited dengan diri sendiri
             el.addNode(el.getIdx());
      
             // Kondisi ketemu
             if (el.getIdx() === idxdes) {
                 return el;
             }
      
             // Kondisi gaketemu : dummy element dgn indeks -1
             else {
                 return new Element(-1, [], 0, 0);
             }
         }
    });
        
    </script>
  </body>
</html>
